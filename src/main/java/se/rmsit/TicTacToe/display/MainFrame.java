package se.rmsit.TicTacToe.display;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import se.rmsit.TicTacToe.Game;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

public class MainFrame extends JFrame {

	private JPanel panelMain;
	private JButton startGameButton;
	private JLabel labelError;
	private GamePanel gamePanel;
	private JLabel labelNextPlayer;

	public MainFrame(String title) {
		// Initiera JFrame
		super(title);
		// Sätt innehållet för JFrame
		this.setContentPane(this.panelMain);
		// Ändrar JFrames standard storlek
		this.setSize(600, 300);
		// center window
		this.setLocationRelativeTo(null);
		// Stänger av programmet när användaren stänger programmet. Annars kör den i bakgrunden.
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		// Visar JFramen
		this.setVisible(true);

		addListeners();
	}

	private void addListeners() {
		startGameButton.addActionListener(e -> {
			// Anropar startGame från Game-klassen för att även GameEngine ska informeras.
			// Game-klassen anropar sedan startGame() i denna klass.
			Game.startGame();
		});
	}

	public void setErrorMessage(String message) {
		labelError.setText(message);
	}

	public void updateNextPlayer(char player) {
		labelNextPlayer.setText("Nästa spelare: " + Character.toUpperCase(player));
	}

	public void startGame() {
		startGameButton.setEnabled(false);
		gamePanel.restart();
	}

	public void endGame() {
		startGameButton.setEnabled(true);
		gamePanel.end();
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		panelMain = new JPanel();
		panelMain.setLayout(new GridLayoutManager(8, 8, new Insets(0, 0, 0, 0), -1, -1));
		final JLabel label1 = new JLabel();
		label1.setText("Lets play some Tic Tac Toe");
		panelMain.add(label1, new GridConstraints(1, 1, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer1 = new Spacer();
		panelMain.add(spacer1, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		final Spacer spacer2 = new Spacer();
		panelMain.add(spacer2, new GridConstraints(1, 7, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		final Spacer spacer3 = new Spacer();
		panelMain.add(spacer3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		startGameButton = new JButton();
		startGameButton.setText("Start Game");
		panelMain.add(startGameButton, new GridConstraints(1, 5, 2, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer4 = new Spacer();
		panelMain.add(spacer4, new GridConstraints(7, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		labelNextPlayer = new JLabel();
		labelNextPlayer.setText("Nästa spelare: -");
		panelMain.add(labelNextPlayer, new GridConstraints(2, 1, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		gamePanel = new GamePanel();
		panelMain.add(gamePanel, new GridConstraints(3, 2, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		final ResultPanel nestedForm1 = new ResultPanel();
		panelMain.add(nestedForm1.$$$getRootComponent$$$(), new GridConstraints(3, 4, 2, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(310, 178), new Dimension(310, 178), null, 0, false));
		labelError = new JLabel();
		Font labelErrorFont = this.$$$getFont$$$(null, Font.BOLD, -1, labelError.getFont());
		if (labelErrorFont != null) labelError.setFont(labelErrorFont);
		labelError.setForeground(new Color(-4518641));
		labelError.setText(" ");
		panelMain.add(labelError, new GridConstraints(5, 2, 2, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
	}

	/**
	 * @noinspection ALL
	 */
	private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
		if (currentFont == null) return null;
		String resultName;
		if (fontName == null) {
			resultName = currentFont.getName();
		} else {
			Font testFont = new Font(fontName, Font.PLAIN, 10);
			if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
				resultName = fontName;
			} else {
				resultName = currentFont.getName();
			}
		}
		Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
		boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
		Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
		return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return panelMain;
	}

}
